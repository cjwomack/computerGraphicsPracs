#version 330 core

in vec2 fragmentTexCoord;

uniform sampler2D colorbuffer;

out vec4 color;

const float offset = 1.0 / 640.0;
const vec2 offsets[9] = vec2[](
    vec2(-offset,  offset), // top-left
    vec2( 0.0f,    offset), // top-center
    vec2( offset,  offset), // top-right
    vec2(-offset,  0.0f),   // center-left
    vec2( 0.0f,    0.0f),   // center-center
    vec2( offset,  0.0f),   // center-right
    vec2(-offset, -offset), // bottom-left
    vec2( 0.0f,   -offset), // bottom-center
    vec2( offset, -offset)  // bottom-right    
);

const float sobel_dx_kernel[9] = float[](
    1, 0, -1,
    2, 0, -2,
    1, 0, -1
);

//TODO: define a sobel dy kernel

//TODO: define a blur kernel

vec4 Edge();
vec4 Blur();
float Luminosity_Grayscale(vec3 color);

vec4 Edge() {

    //dx stores the partial derivative dColor/dx
    vec3 dx = vec3(0);
    //dy stores the partial derivative dColor/dy
    vec3 dy = vec3(0);

    //Apply the edge filter kernels
    for(int i = 0; i < 9; i++)
    {
        dx += sobel_dx_kernel[i] * vec3(texture(colorbuffer, fragmentTexCoord.st + offsets[i]));
        dy += sobel_dy_kernel[i] * vec3(texture(colorbuffer, fragmentTexCoord.st + offsets[i]));
    }

    //The colors are then the individual magnitudes of grad(Color)
    float r = sqrt(dx.r * dx.r + dy.r * dy.r);
    float g = sqrt(dx.g * dx.g + dy.g * dy.g);
    float b = sqrt(dx.b * dx.b + dy.b * dy.b);
    
    return vec4(r, g, b, 1.0);
}

//TODO: create the blur function

float Luminosity_Grayscale(vec3 color) {

    vec3 coefficients = vec3(0.3, 0.59, 0.11);

    return dot(color, coefficients);
    
}

void main()
{
    baseColor = vec3(texture(colorbuffer, fragmentTexCoord));
    color = vec4(vec3(Luminosity_Grayscale(baseColor)), 1.0);
}